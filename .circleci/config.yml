# CircleCI Configuration for Governance Token Analyzer
# This configuration translates the comprehensive GitHub Actions pipeline
# to CircleCI format with equivalent functionality and job orchestration
# Update: Fixed validation script and thread-safety issues in tests

version: 2.1

# Orbs provide reusable packages of CircleCI configuration
orbs:
  python: circleci/python@2.1.1
  codecov: codecov/codecov@3.2.4

# Parameters allow us to create reusable job templates
# This enables matrix-like builds across different Python versions
parameters:
  python-versions:
    type: string
    default: "3.8,3.9,3.10,3.12"

# Define reusable executors for different Python versions
executors:
  python-38:
    docker:
      - image: cimg/python:3.8
    working_directory: ~/governance-token-analyzer
    resource_class: medium
    environment:
      PYTHONUNBUFFERED: 1
    
  python-39:
    docker:
      - image: cimg/python:3.9
    working_directory: ~/governance-token-analyzer
    resource_class: medium
    environment:
      PYTHONUNBUFFERED: 1
    
  python-310:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/governance-token-analyzer
    resource_class: medium
    environment:
      PYTHONUNBUFFERED: 1
    
  python-312:
    docker:
      - image: cimg/python:3.12
    working_directory: ~/governance-token-analyzer
    resource_class: medium
    environment:
      PYTHONUNBUFFERED: 1

# Reusable commands to reduce repetition
commands:
  install_python_dependencies:
    description: "Install Python dependencies"
    steps:
      - run:
          name: Remove pyenv version file (Docker images have fixed Python versions)
          command: |
            if [ -f .python-version ]; then
              echo "Removing .python-version file (incompatible with CircleCI Docker images)"
              rm .python-version
            fi
      - run:
          name: Check Python and pip version
          command: |
            python --version
            pip --version
      - restore_cache:
          keys:
            - pip-cache-v1-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ checksum "pyproject.toml" }}
            - pip-cache-v1-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-
            - pip-cache-v1-
      - run:
          name: Install dependencies
          command: |
            # Ensure pip is available and updated
            python -m pip install --upgrade pip setuptools wheel
            python -m pip install -e .[dev]
            python -m pip install psutil
      - save_cache:
          key: pip-cache-v1-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ checksum "pyproject.toml" }}
          paths:
            - ~/.cache/pip

  setup_environment:
    description: "Setup environment variables"
    steps:
      - run:
          name: Set environment variables
          command: |
            echo 'export PYTHONPATH="${PYTHONPATH}:${PWD}"' >> $BASH_ENV
            echo 'export PYTHONUNBUFFERED=1' >> $BASH_ENV
            echo 'export TEST_MODE=ci' >> $BASH_ENV
            echo 'export SKIP_LIVE_TESTS=true' >> $BASH_ENV
            # Use existing .env file if available
            if [ -f .env ]; then
              cat .env | grep -v '^#' >> $BASH_ENV
            fi

  upload_codecov:
    description: "Upload coverage to Codecov with proper parameters"
    parameters:
      coverage_file:
        type: string
        default: "coverage.xml"
      flags:
        type: string
        default: ""
    steps:
      - codecov/upload:
          file: << parameters.coverage_file >>
          token: CODECOV_TOKEN
          flags: << parameters.flags >>
          upload_name: ${CIRCLE_BUILD_NUM}
          when: always
          codecov_yml_path: codecov.yml

# Define jobs that will be used in the workflow
jobs:
  security-scan:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Scan for hardcoded secrets
          command: |
            echo "Scanning for potential secrets in codebase..."
            
            # Check for common secret patterns
            SECRET_PATTERNS=(
              "api_key.*=.*[\"'][a-zA-Z0-9]{20,}"
              "secret.*=.*[\"'][a-zA-Z0-9]{20,}"
              "password.*=.*[\"'][^\"']{8,}"
              "sk-[a-zA-Z0-9]{20,}"
              "xapp-[a-zA-Z0-9]{20,}"
            )
            
            FOUND_SECRETS=false
            
            for pattern in "${SECRET_PATTERNS[@]}"; do
              echo "Checking pattern: $pattern"
              if grep -r -E "$pattern" --include="*.py" --include="*.js" --include="*.ts" --include="*.json" --include="*.yaml" --include="*.yml" . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=__pycache__ --exclude-dir=.pytest_cache; then
                echo "⚠️  Potential secret found matching pattern: $pattern"
                FOUND_SECRETS=true
              fi
            done
            
            # Check for real tokens (excluding test addresses and common test patterns)
            echo "Checking for real tokens (excluding test patterns)"
            if grep -r -E "token.*=.*[\"'][a-zA-Z0-9_-]{30,}" --include="*.py" --include="*.js" --include="*.ts" --include="*.json" --include="*.yaml" --include="*.yml" . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=__pycache__ --exclude-dir=.pytest_cache | grep -v -E "(test_|mock_|fake_|dummy_|0x123456|0x1234567890123456789012345678901234567890)" | grep -q .; then
              echo "⚠️  Potential real token found"
              FOUND_SECRETS=true
            fi
            
            # Check for 64-character hex strings (potential private keys) excluding test addresses
            echo "Checking for potential private keys"
            if grep -r -E "0x[a-fA-F0-9]{64}" --include="*.py" --include="*.js" --include="*.ts" --include="*.json" --include="*.yaml" --include="*.yml" . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=__pycache__ --exclude-dir=.pytest_cache | grep -v -E "(test_|mock_|fake_|dummy_)" | grep -q .; then
              echo "⚠️  Potential private key found"
              FOUND_SECRETS=true
            fi
            
            # Check for PEM private keys
            echo "Checking for PEM private keys"
            if grep -r -l "-----BEGIN.*PRIVATE KEY-----" --include="*.py" --include="*.js" --include="*.ts" --include="*.json" --include="*.yaml" --include="*.yml" --include="*.pem" --include="*.key" . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=__pycache__ --exclude-dir=.pytest_cache 2>/dev/null | grep -q .; then
              echo "⚠️  Potential PEM private key found"
              FOUND_SECRETS=true
            fi
            
            # Check for committed .env files
            if find . -name ".env*" -not -path "./.git/*" -not -name ".env.example" -not -name ".env.template" | grep -q .; then
              echo "⚠️  Found .env files that might contain secrets"
              find . -name ".env*" -not -path "./.git/*" -not -name ".env.example" -not -name ".env.template"
              FOUND_SECRETS=true
            fi
            
            if [ "$FOUND_SECRETS" = true ]; then
              echo "❌ Security scan failed: Potential secrets detected"
              exit 1
            else
              echo "✅ Security scan passed: No obvious secrets detected"
            fi

  code-quality:
    executor: python-312
    steps:
      - checkout
      - install_python_dependencies
      - run:
          name: Run ruff check
          command: |
            python -m ruff check src tests || echo "Ruff check detected issues but continuing..."
          when: always
      - run:
          name: Run ruff format check
          command: |
            python -m ruff format --check src tests || echo "Ruff format check failed but continuing..."
          when: always
      - run:
          name: Run mypy check
          command: |
            python -m mypy src || echo "MyPy check failed but continuing..."
          when: always

  unit-tests-python-38:
    executor: python-38
    steps:
      - checkout
      - setup_environment
      - install_python_dependencies
      - run:
          name: Run unit tests
          command: |
            python -m pytest tests/ -v -k "not test_live_data_integration and not TestLiveDataIntegration" -m "not integration and not performance" --cov=src --cov-report=xml --cov-report=html --junit-xml=test-results.xml
      - store_test_results:
          path: test-results.xml
      - store_artifacts:
          path: htmlcov
          destination: coverage-report-python-38
      - store_artifacts:
          path: coverage.xml
          destination: coverage-xml-python-38
      - upload_codecov:
          coverage_file: coverage.xml
          flags: unit,python38
          
  unit-tests-python-39:
    executor: python-39
    steps:
      - checkout
      - setup_environment
      - install_python_dependencies
      - run:
          name: Run unit tests
          command: |
            python -m pytest tests/ -v -k "not test_live_data_integration and not TestLiveDataIntegration" -m "not integration and not performance" --cov=src --cov-report=xml --cov-report=html --junit-xml=test-results.xml
      - store_test_results:
          path: test-results.xml
      - store_artifacts:
          path: htmlcov
          destination: coverage-report-python-39
      - store_artifacts:
          path: coverage.xml
          destination: coverage-xml-python-39
      - upload_codecov:
          coverage_file: coverage.xml
          flags: unit,python39
          
  unit-tests-python-310:
    executor: python-310
    steps:
      - checkout
      - setup_environment
      - install_python_dependencies
      - run:
          name: Run unit tests
          command: |
            python -m pytest tests/ -v -k "not test_live_data_integration and not TestLiveDataIntegration" -m "not integration and not performance" --cov=src --cov-report=xml --cov-report=html --junit-xml=test-results.xml
      - store_test_results:
          path: test-results.xml
      - store_artifacts:
          path: htmlcov
          destination: coverage-report-python-310
      - store_artifacts:
          path: coverage.xml
          destination: coverage-xml-python-310
      - upload_codecov:
          coverage_file: coverage.xml
          flags: unit,python310
          
  unit-tests-python-312:
    executor: python-312
    steps:
      - checkout
      - setup_environment
      - install_python_dependencies
      - run:
          name: Run unit tests
          command: |
            python -m pytest tests/ -v -k "not test_live_data_integration and not TestLiveDataIntegration" -m "not integration and not performance" --cov=src --cov-report=xml --cov-report=html --junit-xml=test-results.xml
      - store_test_results:
          path: test-results.xml
      - store_artifacts:
          path: htmlcov
          destination: coverage-report-python-312
      - store_artifacts:
          path: coverage.xml
          destination: coverage-xml-python-312
      - upload_codecov:
          coverage_file: coverage.xml
          flags: unit,python312
          
  # Integration tests - similar structure to unit tests but for integration tests
  integration-tests-python-38:
    executor: python-38
    steps:
      - checkout
      - setup_environment
      - install_python_dependencies
      - run:
          name: Run integration tests
          command: |
            python -m pytest tests/ -v -m integration --cov=src --cov-report=xml --cov-report=html --junit-xml=integration-results.xml --cov-report=term-missing
      - store_test_results:
          path: integration-results.xml
      - store_artifacts:
          path: htmlcov
          destination: integration-coverage-python-38
      - store_artifacts:
          path: integration-results.xml
          destination: integration-results-python-38
      - upload_codecov:
          coverage_file: coverage.xml
          flags: integration,python38
          
  integration-tests-python-39:
    executor: python-39
    steps:
      - checkout
      - setup_environment
      - install_python_dependencies
      - run:
          name: Run integration tests
          command: |
            python -m pytest tests/ -v -m integration --cov=src --cov-report=xml --cov-report=html --junit-xml=integration-results.xml --cov-report=term-missing
      - store_test_results:
          path: integration-results.xml
      - store_artifacts:
          path: htmlcov
          destination: integration-coverage-python-39
      - store_artifacts:
          path: integration-results.xml
          destination: integration-results-python-39
      - upload_codecov:
          coverage_file: coverage.xml
          flags: integration,python39
          
  integration-tests-python-310:
    executor: python-310
    steps:
      - checkout
      - setup_environment
      - install_python_dependencies
      - run:
          name: Run integration tests
          command: |
            python -m pytest tests/ -v -m integration --cov=src --cov-report=xml --cov-report=html --junit-xml=integration-results.xml --cov-report=term-missing
      - store_test_results:
          path: integration-results.xml
      - store_artifacts:
          path: htmlcov
          destination: integration-coverage-python-310
      - store_artifacts:
          path: integration-results.xml
          destination: integration-results-python-310
      - upload_codecov:
          coverage_file: coverage.xml
          flags: integration,python310
          
  integration-tests-python-312:
    executor: python-312
    steps:
      - checkout
      - setup_environment
      - install_python_dependencies
      - run:
          name: Run integration tests
          command: |
            python -m pytest tests/ -v -m integration --cov=src --cov-report=xml --cov-report=html --junit-xml=integration-results.xml --cov-report=term-missing
      - store_test_results:
          path: integration-results.xml
      - store_artifacts:
          path: htmlcov
          destination: integration-coverage-python-312
      - store_artifacts:
          path: integration-results.xml
          destination: integration-results-python-312
      - upload_codecov:
          coverage_file: coverage.xml
          flags: integration,python312

  # CLI tests - test the command-line interface functionality
  cli-tests:
    executor: python-312
    steps:
      - checkout
      - setup_environment
      - install_python_dependencies
      - run:
          name: Run CLI tests
          command: |
            python -m pytest tests/test_cli*.py -v --junit-xml=cli-results.xml --cov=src --cov-report=xml --cov-report=html
      - store_test_results:
          path: cli-results.xml
      - store_artifacts:
          path: htmlcov
          destination: cli-coverage-html
      - store_artifacts:
          path: cli-results.xml
          destination: cli-test-results
      - upload_codecov:
          coverage_file: coverage.xml
          flags: cli,python312

  # Build documentation
  build-docs:
    executor: python-312
    steps:
      - checkout
      - install_python_dependencies
      - run:
          name: Install documentation dependencies
          command: |
            pip install sphinx sphinx_rtd_theme
      - run:
          name: Build documentation
          command: |
            cd docs
            make html || echo "Documentation build failed but continuing..."
          when: always
      - store_artifacts:
          path: docs/_build/html
          destination: docs

  # Package deployment
  deploy-package:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - setup_environment
      - install_python_dependencies
      - run:
          name: Build package
          command: |
            pip install build
            python -m build
      - store_artifacts:
          path: dist
          
  # Final verification job - ensures all critical jobs passed
  verify-success:
    executor: python-312
    steps:
      - run:
          name: Verify all jobs succeeded
          command: |
            echo "All required jobs passed!"

# Define the workflow
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - security-scan
      - code-quality
      - unit-tests-python-38:
          requires:
            - security-scan
            - code-quality
      - unit-tests-python-39:
          requires:
            - security-scan
            - code-quality
      - unit-tests-python-310:
          requires:
            - security-scan
            - code-quality
      - unit-tests-python-312:
          requires:
            - security-scan
            - code-quality
      - integration-tests-python-38:
          requires:
            - unit-tests-python-38
      - integration-tests-python-39:
          requires:
            - unit-tests-python-39
      - integration-tests-python-310:
          requires:
            - unit-tests-python-310
      - integration-tests-python-312:
          requires:
            - unit-tests-python-312
      - cli-tests:
          requires:
            - unit-tests-python-312
      - build-docs:
          requires:
            - unit-tests-python-312
      - verify-success:
          requires:
            - integration-tests-python-38
            - integration-tests-python-39
            - integration-tests-python-310
            - integration-tests-python-312
            - cli-tests
            - build-docs