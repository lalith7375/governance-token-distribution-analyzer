name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Security: Scan for secrets and vulnerabilities
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secret scanning
        
    - name: Run TruffleHog for secret detection
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        
    - name: Scan dependencies for vulnerabilities
      run: |
        # Check for known security vulnerabilities
        safety check --json || echo "Safety check completed with warnings"
        pip-audit --format=json || echo "Pip-audit completed with warnings"

  # Code Quality: Formatting, linting, and type checking
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        
    - name: Check code formatting with Ruff
      run: |
        ruff format --check src/governance_token_analyzer/ tests/
        
    - name: Lint with Ruff
      run: |
        ruff check src/governance_token_analyzer/ tests/ --no-fix
        
    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports src/governance_token_analyzer/

  # Unit Tests: Fast, isolated tests
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.12']
      fail-fast: false
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --ignore=tests/integration/ --cov=governance_token_analyzer --cov-report=xml --cov-report=term-missing
        
    - name: Upload unit test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests,python${{ matrix.python-version }}
        name: unit-tests-${{ matrix.python-version }}
        fail_ci_if_error: false

  # Integration Tests: End-to-end functionality tests
  integration-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.12']
      fail-fast: false
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --cov=governance_token_analyzer --cov-report=xml --cov-report=term-missing
        
    - name: Upload integration test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration,python${{ matrix.python-version }}
        name: integration-tests-${{ matrix.python-version }}
        fail_ci_if_error: false
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-artifacts-${{ matrix.python-version }}
        path: |
          tests/integration/test_data/
          plots/
          data/historical/

  # CLI Tests: Test the command-line interface
  cli-tests:
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        
    - name: Test CLI installation and basic commands
      run: |
        # Test that CLI is installed and accessible
        echo "Testing CLI help..."
        gta --help
        
        # Test simulate historical data command
        echo "Testing simulate-historical command..."
        gta simulate-historical --protocol compound --snapshots 3 --output-dir data/historical
        
        # Test generate report command  
        echo "Testing generate-report command..."
        gta generate-report --protocol compound --output-dir reports --format html
        
        # Test export historical data
        echo "Testing export-historical-data command..."
        gta export-historical-data --protocol compound --output-dir exports --format json
        
        echo "✅ All CLI commands completed successfully"

  # Final verification: Ensure all critical jobs passed
  verify-success:
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, unit-tests, integration-tests, cli-tests]
    if: always()
    steps:
    - name: Check job results
      run: |
        echo "Security scan: ${{ needs.security-scan.result }}"
        echo "Code quality: ${{ needs.code-quality.result }}"
        echo "Unit tests: ${{ needs.unit-tests.result }}"
        echo "Integration tests: ${{ needs.integration-tests.result }}"
        echo "CLI tests: ${{ needs.cli-tests.result }}"
        
        # Fail if any critical job failed
        if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "❌ Security scan failed"
          exit 1
        fi
        
        if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "❌ Code quality checks failed"
          exit 1
        fi
        
        if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
          echo "❌ Unit tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
          echo "❌ Integration tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.cli-tests.result }}" != "success" ]]; then
          echo "❌ CLI tests failed"
          exit 1
        fi
        
        echo "✅ All CI jobs passed successfully!" 